esphome:
  name: esphome-euc
  friendly_name: ESPHome EUC Sensor
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# To be able to get logs from the device via serial and api.
logger:

# API is a requirement of the dashboard import.
api:
  encryption:
    key: !secret ha_encryption_key

# OTA is required for Over-the-Air updating
ota:
  - platform: esphome
    password: !secret wifi_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  # Set up a wifi access point using the device name above
  ap:

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

web_server:
  port: 80
  include_internal: false
  version: 3
  sorting_groups:
    - id: sorting_group_states
      name: "States"
      sorting_weight: 1
    - id: sorting_group_sensors
      name: "Sensors"
      sorting_weight: 2

esp32_improv:
  authorizer: none

improv_serial:

light:
  - platform: status_led
    name: Status LED
    id: status
    pin: GPIO2
    entity_category: "diagnostic"
    internal: true

esp32_ble:

esp32_ble_tracker:
  max_connections: 3

ble_client:
  - mac_address: !secret euc_mac
    id: euc
    auto_connect: true
    on_connect:
      then:
        - lambda: |-
            id(connectedState).publish_state(true);
    on_disconnect:
      then:
        - lambda: |-
            id(connectedState).publish_state(false);
            id(chargingState).publish_state(false);
            id(liftedState).publish_state(false);
            id(battery).publish_state(NAN);
            id(voltage).publish_state(NAN);
            id(current).publish_state(NAN);
            id(power).publish_state(NAN);

interval:
  - interval: 1000ms
    startup_delay: 5sec
    then:
      - light.turn_on:
          id: status
      - ble_client.ble_write:
          id: euc
          service_uuid: !secret service_uuid
          characteristic_uuid: !secret rx_char_uuid
          value: [0xAA, 0xAA, 0x14, 0x01, 0x04, 0x11]
      - light.turn_off:
          id: status

sensor:
  - platform: ble_client
    id: states
    internal: true
    entity_category: diagnostic
    ble_client_id: euc
    type: characteristic
    notify: true
    service_uuid: !secret service_uuid
    characteristic_uuid: !secret tx_char_uuid
    lambda: |-
        if (x[2] != 0x14 || (x[4] & 0x7F) != 0x04) {
          return {};
        }

        id(status).turn_on().perform();
        
        bool isCharging = (x[61] >> 7) & 0x01;
        bool isLifted = (x[61] >> 6) & 0x01;
        uint16_t batteryPercentage = ((x[34] & 0xFF) << 8) | (x[33] & 0xFF);
        uint16_t voltageValue = ((x[6] & 0xFF) << 8) | (x[5] & 0xFF);
        int16_t currentValue = ((x[8] << 8) | (x[7] & 0xFF));
        float powerValue = (currentValue / 100.0f) * (voltageValue / 100.0f);

        id(chargingState).publish_state(isCharging);
        id(liftedState).publish_state(isLifted);
        id(battery).publish_state(batteryPercentage / 100.0f);
        id(voltage).publish_state(voltageValue / 100.0f);
        id(current).publish_state(currentValue / 100.0f);
        id(power).publish_state(powerValue);

        id(status).turn_off().perform();
        
        return {};

  - platform: template
    id: battery
    name: battery
    icon: mdi:battery
    device_class: battery
    state_class: measurement
    unit_of_measurement: '%'
    accuracy_decimals: 2
    web_server:
      sorting_weight: 10
      sorting_group_id: sorting_group_sensors

  - platform: template
    id: voltage
    name: voltage
    icon: mdi:flash
    device_class: voltage
    state_class: measurement
    unit_of_measurement: 'V'
    accuracy_decimals: 2
    web_server:
      sorting_weight: 20
      sorting_group_id: sorting_group_sensors

  - platform: template
    id: current
    name: current
    icon: mdi:current-ac
    device_class: current
    state_class: measurement
    unit_of_measurement: 'A'
    accuracy_decimals: 2
    web_server:
      sorting_weight: 30
      sorting_group_id: sorting_group_sensors

  - platform: template
    id: power
    name: power
    icon: mdi:flash
    device_class: power
    state_class: measurement
    unit_of_measurement: 'W'
    accuracy_decimals: 2
    web_server:
      sorting_weight: 40
      sorting_group_id: sorting_group_sensors

binary_sensor:
  - platform: template
    id: connectedState
    name: connectedState
    icon: mdi:bluetooth
    device_class: connectivity
    web_server:
      sorting_weight: 10
      sorting_group_id: sorting_group_states

  - platform: template
    id: chargingState
    name: chargingState
    icon: mdi:power-plug-battery
    device_class: battery_charging
    web_server:
      sorting_weight: 20
      sorting_group_id: sorting_group_states

  - platform: template
    id: liftedState
    name: liftedState
    icon: mdi:horizontal-rotate-counterclockwise
    device_class: moving
    web_server:
      sorting_weight: 30
      sorting_group_id: sorting_group_states

button:
  - platform: restart
    name: "Restart ESP32"
    entity_category: "diagnostic"
    web_server:
      sorting_weight: 10

switch:
  - platform: template
    name: "BLE scan"
    optimistic: true
    entity_category: "diagnostic"
    web_server:
      sorting_weight: 20
    on_turn_on:
      - esp32_ble_tracker.start_scan:
    on_turn_off:
      - esp32_ble_tracker.stop_scan:
  
  - platform: template
    name: "BLE connect"
    optimistic: true
    entity_category: "diagnostic"
    web_server:
      sorting_weight: 30
    on_turn_on:
      - ble_client.connect: euc
    on_turn_off:
      - ble_client.disconnect: euc
