substitutions:
  # EUC Settings
  euc_name: "Inmotion V11"
  euc_mac: "DD:88:DD:56:18:CB"
  euc_service_uuid: 6E400001-B5A3-F393-E0A9-E50E24DCCA9E
  euc_rx_char_uuid: 6E400002-B5A3-F393-E0A9-E50E24DCCA9E
  euc_tx_char_uuid: 6E400003-B5A3-F393-E0A9-E50E24DCCA9E

  # Intercom Services
  intercom_name: "Fodsports FX7"
  intercom_mac: "10:90:41:00:38:04"
  intercom_battery_service_uuid: ""
  intercom_battery_char_uuid: ""

esphome:
  name: esphome-euc
  friendly_name: ESPHome EUC Sensor
  # includes:
  #   - esp_logd_hex.h

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# To be able to get logs from the device via serial and api.
logger:
  logs:
    light: ERROR
    status_led: ERROR
    component: ERROR
    esp32_ble_client: ERROR
    ble_sensor: ERROR
    binary_sensor: ERROR
    sensor: ERROR

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  ap:

# API is a requirement of the dashboard import.
api:
  encryption:
    key: !secret ha_encryption_key

# OTA is required for Over-the-Air updating
ota:
  - platform: esphome
    password: !secret wifi_password

web_server:
  port: 80
  include_internal: false
  version: 3
  sorting_groups:
    - id: sorting_group_states
      name: "States"
      sorting_weight: 10
    - id: sorting_group_sensors
      name: "Sensor and Control"
      sorting_weight: 20
    - id: diagnostic
      name: "Diagnostic"
      sorting_weight: 30

light:
  - platform: status_led
    name: Status LED
    id: status
    pin: GPIO2
    entity_category: "diagnostic"
    internal: true

esp32_ble:

esp32_ble_tracker:
  max_connections: 2

ble_client:  
  - mac_address: ${intercom_mac}
    id: intercom
    auto_connect: true

  - mac_address: ${euc_mac}
    id: euc
    auto_connect: true
    on_connect:
      then:
        - lambda: |-
            id(euc_connected).publish_state(true);
    on_disconnect:
      then:
        - lambda: |-
            id(euc_connected).publish_state(false);
            id(euc_charging).publish_state(false);
            id(euc_lifted).publish_state(false);
            id(euc_battery).publish_state(NAN);
            id(euc_voltage).publish_state(NAN);
            id(euc_current).publish_state(NAN);
            id(euc_power).publish_state(NAN);

interval:
  - interval: 1000ms
    startup_delay: 5sec
    then:
      - light.turn_on:
          id: status
      - ble_client.ble_write:
          id: euc
          service_uuid: ${euc_service_uuid}
          characteristic_uuid: ${euc_rx_char_uuid}
          value: [0xAA, 0xAA, 0x14, 0x01, 0x04, 0x11]
      - light.turn_off:
          id: status

sensor:
  - platform: ble_client
    id: states
    internal: true
    entity_category: diagnostic
    ble_client_id: euc
    type: characteristic
    notify: true
    service_uuid: ${euc_service_uuid}
    characteristic_uuid: ${euc_tx_char_uuid}
    lambda: |-
      // ESP_LOGD_HEX(x, ':');
      if (x[2] != 0x14 || (x[4] & 0x7F) != 0x04) {
        return {};
      }

      id(status).turn_on().perform();

      bool isCharging = (x[61] >> 7) & 0x01;
      bool isLifted = (x[61] >> 6) & 0x01;
      uint16_t batteryPercentage = ((x[34] & 0xFF) << 8) | (x[33] & 0xFF);
      uint16_t voltageValue = ((x[6] & 0xFF) << 8) | (x[5] & 0xFF);
      int16_t currentValue = ((x[8] << 8) | (x[7] & 0xFF));
      float powerValue = (currentValue / 100.0f) * (voltageValue / 100.0f);

      id(euc_charging).publish_state(isCharging);
      id(euc_lifted).publish_state(isLifted);
      if (batteryPercentage > 0) {
        id(euc_battery).publish_state(batteryPercentage / 100.0f);
      }
      if (voltageValue > 0) {
        id(euc_voltage).publish_state(voltageValue / 100.0f);
      }
      if (currentValue > 0) {
        id(euc_current).publish_state(currentValue / 100.0f);
      }
      id(euc_power).publish_state(powerValue);

      id(status).turn_off().perform();
      
      return {};

  - platform: template
    id: euc_battery
    name: "${euc_name} Battery"
    icon: mdi:battery
    device_class: battery
    state_class: measurement
    unit_of_measurement: '%'
    accuracy_decimals: 2
    web_server:
      sorting_weight: 10
      sorting_group_id: sorting_group_sensors

  - platform: template
    id: euc_voltage
    name: "${euc_name} Voltage"
    icon: mdi:flash
    device_class: voltage
    state_class: measurement
    unit_of_measurement: 'V'
    accuracy_decimals: 2
    web_server:
      sorting_weight: 20
      sorting_group_id: sorting_group_sensors

  - platform: template
    id: euc_current
    name: "${euc_name} Current"
    icon: mdi:current-ac
    device_class: current
    state_class: measurement
    unit_of_measurement: 'A'
    accuracy_decimals: 2
    web_server:
      sorting_weight: 30
      sorting_group_id: sorting_group_sensors

  - platform: template
    id: euc_power
    name: "${euc_name} Power"
    icon: mdi:flash
    device_class: power
    state_class: measurement
    unit_of_measurement: 'W'
    accuracy_decimals: 2
    web_server:
      sorting_weight: 40
      sorting_group_id: sorting_group_sensors

  - platform: ble_client
    id: intercom_battery
    type: characteristic
    ble_client_id: intercom
    name: "${intercom_name} Battery"
    service_uuid: "180f"
    characteristic_uuid: "2a19"
    icon: "mdi:battery"
    unit_of_measurement: "%"
    web_server:
      sorting_weight: 50
      sorting_group_id: sorting_group_sensors

  - platform: ble_client
    id: intercom_rssi
    type: rssi
    ble_client_id: intercom
    name: "${intercom_name} RSSI"
    web_server:
      sorting_weight: 60
      sorting_group_id: sorting_group_sensors

binary_sensor:
  - platform: template
    id: euc_connected
    name: "${euc_name} Connected"
    icon: mdi:bluetooth
    device_class: connectivity
    web_server:
      sorting_weight: 10
      sorting_group_id: sorting_group_states

  - platform: template
    id: euc_charging
    name: "${euc_name} Charging"
    icon: mdi:power-plug-battery
    device_class: battery_charging
    web_server:
      sorting_weight: 20
      sorting_group_id: sorting_group_states

  - platform: template
    id: euc_lifted
    name: "${euc_name} Lifted"
    icon: mdi:horizontal-rotate-counterclockwise
    web_server:
      sorting_weight: 30
      sorting_group_id: sorting_group_states

button:
  - platform: restart
    name: "Restart ESP32"
    entity_category: "diagnostic"
    web_server:
      sorting_group_id: diagnostic
      sorting_weight: 10

# switch:
#   - platform: template
#     name: "BLE scan"
#     optimistic: true
#     entity_category: "diagnostic"
#     restore_mode: DISABLED
#     web_server:
#       sorting_weight: 20
#     on_turn_on:
#       - esp32_ble_tracker.start_scan:
#     on_turn_off:
#       - esp32_ble_tracker.stop_scan:
  
#   - platform: template
#     name: "BLE connect"
#     optimistic: true
#     entity_category: "diagnostic"
#     restore_mode: DISABLED
#     web_server:
#       sorting_weight: 30
#     on_turn_on:
#       - ble_client.connect: euc
#     on_turn_off:
#       - ble_client.disconnect: euc
